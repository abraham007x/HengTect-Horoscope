from flask import Flask, request, jsonify
import torch, cv2
import numpy as np
from torchvision import transforms, models
from PIL import Image
import mediapipe as mp
from flask_cors import CORS
import requests
import os
import gdown
from flask import send_from_directory


app = Flask(__name__)
CORS(app)

score_map = {0: 2, 1: 4, 2: 6, 3: 8, 4: 10}

LANDMARKS = {
    "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô": list(range(65, 85)),
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": list(range(4, 8)) + list(range(94, 100)),
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å": list(range(78, 88)) + list(range(308, 318)),
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": list(range(234, 356)),
    "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á": list(range(152, 171)),
}

def load_model(path):
    model = models.resnet34(weights=None)
    model.fc = torch.nn.Linear(model.fc.in_features, 5)
    model.load_state_dict(torch.load(path, map_location='cpu'))
    model.eval()
    return model


def download_model(url, local_path):
    if not os.path.exists(local_path):
        print(f"üîΩ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {local_path}")
        gdown.download(url, local_path, quiet=False)

# ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Google Drive
download_model("https://drive.google.com/uc?id=160WTbJ82GPvtDkgV4y2k8lM3rccOurGB", "model_work.pth")
download_model("https://drive.google.com/uc?id=1CsPGHNYvyCy_E8Ab6J3KfnrSBJCudNIo", "model_money.pth")
download_model("https://drive.google.com/uc?id=1OP3PIMPtIq2-JStBdQFo_vFybkVgQEik", "model_love.pth")
download_model("https://drive.google.com/uc?id=1S_8aY_Wpxu3oCgzo0jPSNq7OESbSd-N4", "model_health.pth")
download_model("https://drive.google.com/uc?id=1AsJgsoy1VMfiAGQT9zFErb1fuYUy5-w4", "model_protect.pth")


models_dict = {
    "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô": load_model("model_work.pth"),
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": load_model("model_money.pth"),
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å": load_model("model_love.pth"),
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": load_model("model_health.pth"),
    "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á": load_model("model_protect.pth")
}



transform = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])

@app.route('/predict', methods=['POST'])
def predict():
    file = request.files['image']
    image = Image.open(file.stream).convert('RGB')
    image_bgr = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    h, w = image_bgr.shape[:2]

    face_mesh = mp.solutions.face_mesh.FaceMesh(static_image_mode=True, max_num_faces=1)
    results = face_mesh.process(cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB))
    if not results.multi_face_landmarks:
        return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤"}), 400

    landmarks = results.multi_face_landmarks[0].landmark
    featureScores = {}

    for label, model in models_dict.items():
        pts = np.array([(int(landmarks[i].x * w), int(landmarks[i].y * h)) for i in LANDMARKS[label]])
        x, y, ww, hh = cv2.boundingRect(pts)
        crop = image_bgr[max(y-10,0):y+hh+10, max(x-10,0):x+ww+10]

        if crop.size == 0:
            featureScores[label] = 0
            continue

        img = Image.fromarray(cv2.cvtColor(crop, cv2.COLOR_BGR2RGB))
        input_tensor = transform(img).unsqueeze(0)
        with torch.no_grad():
            pred = model(input_tensor).argmax().item()
            featureScores[label] = score_map[pred]

    return jsonify({"featureScores": featureScores})

# Gemini API key ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("No Gemini API key set in environment variable GEMINI_API_KEY")

GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

@app.route('/generate_horoscope', methods=['POST'])
def generate_horoscope():
    data = request.json
    score = data.get("score")
    zodiac = data.get("zodiac")
    deity_name = data.get("deity", "‡∏≠‡∏á‡∏Ñ‡πå‡πÄ‡∏ó‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")


    if not score or not zodiac:
        return jsonify({"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö"}), 400

    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠‡∏î‡∏π AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤ ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÇ‡∏´‡∏á‡∏ß‡πÄ‡∏Æ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏®‡∏µ  
‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏®‡∏µ {zodiac} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å 5 ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏á‡∏ß‡πÄ‡∏Æ‡πâ‡∏á ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà  
- ‡∏Ñ‡∏¥‡πâ‡∏ß (‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô): {score.get("‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", 0)}
- ‡∏à‡∏°‡∏π‡∏Å (‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô): {score.get("‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", 0)}
- ‡∏õ‡∏≤‡∏Å (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å): {score.get("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", 0)}
- ‡πÅ‡∏Å‡πâ‡∏° (‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û): {score.get("‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", 0)}
- ‡∏Ñ‡∏≤‡∏á (‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á): {score.get("‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á", 0)}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå  
‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£  
‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô ‡∏à‡∏∏‡∏î‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÄ‡πÄ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÄ‡πÄ‡∏ô‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πá‡∏ö‡πÅ‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏π‡∏î‡πÄ‡∏≠‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏î‡∏π‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö

‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤ ‚Äú‡∏≠‡∏á‡∏Ñ‡πå‡πÄ‡∏ó‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏ä‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ {deity_name}‚Äù  
‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡πÄ‡∏ó‡∏û‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πà‡∏≤‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏°‡πÉ‡∏™ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏ä‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏°‡∏á‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤

‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10‚Äì11 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î  
‡πÄ‡∏ô‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏á‡∏î‡∏á‡∏≤‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤"""
    


    


    try:
        body = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt}
                    ]
                }
            ]
        }
        headers = {
            "Content-Type": "application/json"
        }

        resp = requests.post(GEMINI_URL, json=body, headers=headers)
        resp.raise_for_status()

        response_data = resp.json()
        result = response_data['candidates'][0]['content'] if 'candidates' in response_data and response_data['candidates'] else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI"

        return jsonify({"result": result})

    except Exception as e:
        print("‚ùå Gemini API ERROR:", e)
        return jsonify({"error": str(e)}), 500


@app.route('/')
def serve_index():
    return send_from_directory('static', 'index1.html')

@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory('static', path)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

